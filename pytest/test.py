#
# Copyright (c) 2023 Vector Informatik GmbH
# 
# SPDX-License-Identifier: MIT
#

import sys
import os

import pybtf
import unittest

def getFileAsString(path):
    f = open(path, "r")
    content = f.read()
    f.close()
    return content

def getNumLinesInFile(path):
    with open(path) as f:
        for i, l in enumerate(f):
            pass
    return i + 1

class TestLibHelper(unittest.TestCase):
    def test_logging(self):
        pybtf.pybtf.helper.initLogging(pybtf.pybtf.helper.LogLevel.trace, "log.txt")
        pybtf.pybtf.helper.Log(pybtf.pybtf.helper.LogLevel.trace, "Trace message")
        pybtf.pybtf.helper.Log(pybtf.pybtf.helper.LogLevel.warning, "Warn message")
        pybtf.pybtf.helper.Log(pybtf.pybtf.helper.LogLevel.error, "Error message")
        pybtf.pybtf.helper.flushLog()
        self.assertTrue(os.path.isfile("log.txt"))
        self.assertEqual(getNumLinesInFile("log.txt"), 3)

        pybtf.pybtf.helper.initLogging(pybtf.pybtf.helper.LogLevel.error, "log.txt")
        pybtf.pybtf.helper.Log(pybtf.pybtf.helper.LogLevel.trace, "Trace message")
        pybtf.pybtf.helper.Log(pybtf.pybtf.helper.LogLevel.warning, "Warn message")
        pybtf.pybtf.helper.Log(pybtf.pybtf.helper.LogLevel.error, "Error message")
        pybtf.pybtf.helper.flushLog()
        self.assertTrue(os.path.isfile("log.txt"))
        self.assertEqual(getNumLinesInFile("log.txt"), 1)

        pybtf.pybtf.helper.initLogging(pybtf.pybtf.helper.LogLevel.trace, "")

class TestBtf_Core(unittest.TestCase):
    def test_simple_test(self):
        btf_file = pybtf.pybtf.BtfFile("test.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, True, False, False)
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.coreEvent(100, "Core1", pybtf.pybtf.CoreEvent.execute))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(200, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.start, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(300, "Core1", "Runnable1", pybtf.pybtf.RunnableEvent.start))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(400, "Core1", "Runnable1", pybtf.pybtf.RunnableEvent.terminate))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(500, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.terminate, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.coreEvent(600, "Core1", pybtf.pybtf.CoreEvent.idle))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.coreEvent(700, "Core2", pybtf.pybtf.CoreEvent.execute))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(800, "Core2", "Task2", 0, pybtf.pybtf.ProcessEvent.start, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(900, "Core2", "Runnable2", pybtf.pybtf.RunnableEvent.start))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(1000, "Core2", "Runnable2", pybtf.pybtf.RunnableEvent.terminate))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(1100, "Core2", "Task2", 0, pybtf.pybtf.ProcessEvent.terminate, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.coreEvent(1200, "Core2", pybtf.pybtf.CoreEvent.idle))
        btf_file.finish()
        self.assertEqual(getFileAsString("test.btf"), "#version 2.2.1\n#creator libBtf\n#timescale ns\n100,Core1,0,C,Core1,0,execute\n200,Core1,0,T,Task1,0,start\n300,Task1,0,R,Runnable1,0,start\n400,Task1,0,R,Runnable1,0,terminate\n500,Core1,0,T,Task1,0,terminate\n600,Core1,0,C,Core1,0,idle\n700,Core2,0,C,Core2,0,execute\n800,Core2,0,T,Task2,0,start\n900,Task2,0,R,Runnable2,0,start\n1000,Task2,0,R,Runnable2,0,terminate\n1100,Core2,0,T,Task2,0,terminate\n1200,Core2,0,C,Core2,0,idle\n")
        
        import_btf = pybtf.pybtf.BtfFile("importtest.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, False, False, False)
        import_btf.importFromFile("test.btf")
        import_btf.finish()
        self.assertEqual(getFileAsString("test.btf"),getFileAsString("importtest.btf"))
        os.remove("test.btf")
        os.remove("importtest.btf")

    def test_runnable_preemption_with_auto_suspend(self):
        btf_file = pybtf.pybtf.BtfFile("test.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, True, False, False)
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.coreEvent(100, "Core1", pybtf.pybtf.CoreEvent.execute))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(200, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.start, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(300, "Core1", "Runnable1", pybtf.pybtf.RunnableEvent.start))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(400, "Core1", "Runnable2", pybtf.pybtf.RunnableEvent.start))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(500, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.preempt, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(600, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.resume, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(700, "Core1", "Runnable2", pybtf.pybtf.RunnableEvent.terminate))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(800, "Core1", "Runnable1", pybtf.pybtf.RunnableEvent.terminate))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(900, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.terminate, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.coreEvent(1000, "Core1", pybtf.pybtf.CoreEvent.idle))
        btf_file.finish()
        self.assertEqual(getFileAsString("test.btf"),"#version 2.2.1\n#creator libBtf\n#timescale ns\n100,Core1,0,C,Core1,0,execute\n200,Core1,0,T,Task1,0,start\n300,Task1,0,R,Runnable1,0,start\n400,Task1,0,R,Runnable1,0,suspend\n400,Task1,0,R,Runnable2,0,start\n500,Task1,0,R,Runnable2,0,suspend\n500,Core1,0,T,Task1,0,preempt\n600,Core1,0,T,Task1,0,resume\n600,Task1,0,R,Runnable2,0,resume\n700,Task1,0,R,Runnable2,0,terminate\n700,Task1,0,R,Runnable1,0,resume\n800,Task1,0,R,Runnable1,0,terminate\n900,Core1,0,T,Task1,0,terminate\n1000,Core1,0,C,Core1,0,idle\n")
        
        import_btf = pybtf.pybtf.BtfFile("importtest.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, False, False, False)
        import_btf.importFromFile("test.btf")
        import_btf.finish()
        self.assertEqual(getFileAsString("test.btf"),getFileAsString("importtest.btf"))
        os.remove("test.btf")
        os.remove("importtest.btf")

    def test_runnable_preemption_without_auto_suspend(self):
        btf_file = pybtf.pybtf.BtfFile("test.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, False, True, False, False)
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.coreEvent(100, "Core1", pybtf.pybtf.CoreEvent.execute))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(200, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.start, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(300, "Core1", "Runnable1", pybtf.pybtf.RunnableEvent.start))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(400, "Core1", "Runnable2", pybtf.pybtf.RunnableEvent.start))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(500, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.preempt, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(600, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.resume, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(700, "Core1", "Runnable2", pybtf.pybtf.RunnableEvent.terminate))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(800, "Core1", "Runnable1", pybtf.pybtf.RunnableEvent.terminate))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(900, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.terminate, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.coreEvent(1000, "Core1", pybtf.pybtf.CoreEvent.idle))
        btf_file.finish()
        self.assertEqual(getFileAsString("test.btf"),"#version 2.2.1\n#creator libBtf\n#timescale ns\n100,Core1,0,C,Core1,0,execute\n200,Core1,0,T,Task1,0,start\n300,Task1,0,R,Runnable1,0,start\n400,Task1,0,R,Runnable2,0,start\n500,Task1,0,R,Runnable2,0,suspend\n500,Task1,0,R,Runnable1,0,suspend\n500,Core1,0,T,Task1,0,preempt\n600,Core1,0,T,Task1,0,resume\n600,Task1,0,R,Runnable1,0,resume\n600,Task1,0,R,Runnable2,0,resume\n700,Task1,0,R,Runnable2,0,terminate\n800,Task1,0,R,Runnable1,0,terminate\n900,Core1,0,T,Task1,0,terminate\n1000,Core1,0,C,Core1,0,idle\n")
        
        import_btf = pybtf.pybtf.BtfFile("importtest.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, False, False, False, False)
        import_btf.importFromFile("test.btf")
        import_btf.finish()
        self.assertEqual(getFileAsString("test.btf"),getFileAsString("importtest.btf"))
        os.remove("test.btf")
        os.remove("importtest.btf")

    def test_start_of_trace_during_runnable_execution(self):
        btf_file = pybtf.pybtf.BtfFile("test.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, True, False, False)
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(300, "Core1", "Runnable2", pybtf.pybtf.RunnableEvent.start))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(400, "Core1", "Runnable2", pybtf.pybtf.RunnableEvent.terminate))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(500, "Core1", "Runnable1", pybtf.pybtf.RunnableEvent.terminate))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(600, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.terminate, False))
        btf_file.finish()
        self.assertEqual(getFileAsString("test.btf"),"#version 2.2.1\n#creator libBtf\n#timescale ns\n300,Task1,0,R,Runnable2,0,start\n400,Task1,0,R,Runnable2,0,terminate\n500,Task1,0,R,Runnable1,0,terminate\n600,Core1,0,T,Task1,0,terminate\n")
        
        import_btf = pybtf.pybtf.BtfFile("importtest.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, False, False, False)
        import_btf.importFromFile("test.btf")
        import_btf.finish()
        self.assertEqual(getFileAsString("test.btf"),getFileAsString("importtest.btf"))
        os.remove("test.btf")
        os.remove("importtest.btf")

    def test_OS_with_auto_task_generation(self):
        btf_file = pybtf.pybtf.BtfFile("test.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, True, False, True)
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.coreEvent(100, "Core1", pybtf.pybtf.CoreEvent.execute))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.coreEvent(200, "Core2", pybtf.pybtf.CoreEvent.execute))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(300, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.start, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(400, "Core2", "Isr1", 0, pybtf.pybtf.ProcessEvent.start, True))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.osEvent(500, "Core1", "OsEvent2", pybtf.pybtf.OsEvent.wait_event))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.osEvent(600, "Core2", "OsEvent2", pybtf.pybtf.OsEvent.set_event))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.osEvent(700, "Core1", "OsEvent2", pybtf.pybtf.OsEvent.clear_event))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(800, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.terminate, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(900, "Core2", "Isr1", 0, pybtf.pybtf.ProcessEvent.terminate, True))
        btf_file.finish()
        self.assertEqual(getFileAsString("test.btf"),"#version 2.2.1\n#creator libBtf\n#timescale ns\n100,Core1,0,C,Core1,0,execute\n200,Core2,0,C,Core2,0,execute\n300,Core1,0,T,Task1,0,start\n400,Core2,0,I,Isr1,0,start\n500,Task1,0,EVENT,OsEvent2,0,wait_event\n500,Core1,0,T,Task1,0,wait\n600,Isr1,0,EVENT,OsEvent2,0,set_event\n600,Core1,0,T,Task1,0,release\n600,Core1,0,T,Task1,0,resume\n700,Task1,0,EVENT,OsEvent2,0,clear_event\n800,Core1,0,T,Task1,0,terminate\n900,Core2,0,I,Isr1,0,terminate\n")
        
        import_btf = pybtf.pybtf.BtfFile("importtest.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, False, False, False)
        import_btf.importFromFile("test.btf")
        import_btf.finish()
        self.assertEqual(getFileAsString("test.btf"),getFileAsString("importtest.btf"))
        os.remove("test.btf")
        os.remove("importtest.btf")

    def test_OS_without_auto_task_generation(self):
        btf_file = pybtf.pybtf.BtfFile("test.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, True, False, False)
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.coreEvent(100, "Core1", pybtf.pybtf.CoreEvent.execute))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.coreEvent(200, "Core2", pybtf.pybtf.CoreEvent.execute))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(300, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.start, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(400, "Core2", "Isr1", 0, pybtf.pybtf.ProcessEvent.start, True))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.osEvent(500, "Core1", "OsEvent2", pybtf.pybtf.OsEvent.wait_event))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(500, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.wait, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.osEvent(600, "Core2", "OsEvent2", pybtf.pybtf.OsEvent.set_event))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(600, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.release, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(600, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.resume, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.osEvent(700, "Core1", "OsEvent2", pybtf.pybtf.OsEvent.clear_event))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(800, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.terminate, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(900, "Core2", "Isr1", 0, pybtf.pybtf.ProcessEvent.terminate, True))
        btf_file.finish()
        self.assertEqual(getFileAsString("test.btf"),"#version 2.2.1\n#creator libBtf\n#timescale ns\n100,Core1,0,C,Core1,0,execute\n200,Core2,0,C,Core2,0,execute\n300,Core1,0,T,Task1,0,start\n400,Core2,0,I,Isr1,0,start\n500,Task1,0,EVENT,OsEvent2,0,wait_event\n500,Core1,0,T,Task1,0,wait\n600,Isr1,0,EVENT,OsEvent2,0,set_event\n600,Core1,0,T,Task1,0,release\n600,Core1,0,T,Task1,0,resume\n700,Task1,0,EVENT,OsEvent2,0,clear_event\n800,Core1,0,T,Task1,0,terminate\n900,Core2,0,I,Isr1,0,terminate\n")
        
        import_btf = pybtf.pybtf.BtfFile("importtest.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, False, False, False)
        import_btf.importFromFile("test.btf")
        import_btf.finish()
        self.assertEqual(getFileAsString("test.btf"),getFileAsString("importtest.btf"))
        os.remove("test.btf")
        os.remove("importtest.btf")

    def test_Stimulus(self):
        btf_file = pybtf.pybtf.BtfFile("test.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, True, False, False)
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.stimulusEvent(100, "StimuliCore1", "StimuliCore1", pybtf.pybtf.StimulusEvent.trigger))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.coreEvent(100, "Core1", pybtf.pybtf.CoreEvent.execute))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.stimulusEvent(200, "StimuliTask", "StimuliTask", pybtf.pybtf.StimulusEvent.trigger))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(200, "StimuliTask", "Task1", 0, pybtf.pybtf.ProcessEvent.activate, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(200, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.start, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(300, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.terminate, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.coreEvent(400, "Core1", pybtf.pybtf.CoreEvent.idle))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.stimulusEvent(500, "StimuliCore2", "StimuliCore2", pybtf.pybtf.StimulusEvent.trigger))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.coreEvent(500, "Core2", pybtf.pybtf.CoreEvent.execute))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.stimulusEvent(600, "StimuliTask", "StimuliTask", pybtf.pybtf.StimulusEvent.trigger))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(600, "StimuliTask", "Task1", 0, pybtf.pybtf.ProcessEvent.activate, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(600, "Core2", "Task1", 0, pybtf.pybtf.ProcessEvent.start, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(700, "Core2", "Task1", 0, pybtf.pybtf.ProcessEvent.terminate, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.coreEvent(800, "Core2", pybtf.pybtf.CoreEvent.idle))
        btf_file.finish()
        self.assertEqual(getFileAsString("test.btf"),"#version 2.2.1\n#creator libBtf\n#timescale ns\n100,StimuliCore1,0,STI,StimuliCore1,0,trigger\n100,Core1,0,C,Core1,0,execute\n200,StimuliTask,0,STI,StimuliTask,0,trigger\n200,StimuliTask,0,T,Task1,0,activate\n200,Core1,0,T,Task1,0,start\n300,Core1,0,T,Task1,0,terminate\n400,Core1,0,C,Core1,0,idle\n500,StimuliCore2,0,STI,StimuliCore2,0,trigger\n500,Core2,0,C,Core2,0,execute\n600,StimuliTask,1,STI,StimuliTask,1,trigger\n600,StimuliTask,1,T,Task1,0,activate\n600,Core2,0,T,Task1,0,start\n700,Core2,0,T,Task1,0,terminate\n800,Core2,0,C,Core2,0,idle\n")
        
        import_btf = pybtf.pybtf.BtfFile("importtest.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, False, False, False)
        import_btf.importFromFile("test.btf")
        import_btf.finish()
        self.assertEqual(getFileAsString("test.btf"),getFileAsString("importtest.btf"))
        os.remove("test.btf")
        os.remove("importtest.btf")

    def test_Scheduler(self):
        btf_file = pybtf.pybtf.BtfFile("test.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, True, False, False)
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.coreEvent(100, "Core1", pybtf.pybtf.CoreEvent.execute))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(200, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.start, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.schedulerEvent(300, "Core1", "Scheduler1", pybtf.pybtf.SchedulerEvent.schedulepoint))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(400, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.preempt, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.schedulerEvent(500, "Scheduler1", "Scheduler1", pybtf.pybtf.SchedulerEvent.schedule))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(600, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.resume, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(700, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.terminate, False))
        btf_file.finish()
        self.assertEqual(getFileAsString("test.btf"),"#version 2.2.1\n#creator libBtf\n#timescale ns\n100,Core1,0,C,Core1,0,execute\n200,Core1,0,T,Task1,0,start\n300,Task1,0,SCHED,Scheduler1,0,schedulepoint\n400,Core1,0,T,Task1,0,preempt\n500,Scheduler1,0,SCHED,Scheduler1,0,schedule\n600,Core1,0,T,Task1,0,resume\n700,Core1,0,T,Task1,0,terminate\n")
        
        import_btf = pybtf.pybtf.BtfFile("importtest.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, False, False, False)
        import_btf.importFromFile("test.btf")
        import_btf.finish()
        self.assertEqual(getFileAsString("test.btf"),getFileAsString("importtest.btf"))
        os.remove("test.btf")
        os.remove("importtest.btf")

    def test_task_state_transitions(self):
        btf_file = pybtf.pybtf.BtfFile("test.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, True, False, False)
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.start, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.allocated_to_different_core, btf_file.processEvent(100, "Core2", "Task1", 0, pybtf.pybtf.ProcessEvent.start, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.preempt, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.descending_timestamp, btf_file.processEvent(0, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.terminate, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.invalid_state_transition, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.terminate, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.resume, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.multiple_tasks_running, btf_file.processEvent(100, "Core1", "Task2", 0, pybtf.pybtf.ProcessEvent.start, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.poll, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.run, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.wait, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.invalid_state_transition, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.resume, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.release, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.resume, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.invalid_state_transition, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.poll_parking, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.terminate, False))
        btf_file.finish()
        os.remove("test.btf")

    def test_task_interrupt_suspend(self):
        btf_file = pybtf.pybtf.BtfFile("test.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, True, False, False)
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.coreEvent(100, "Core1", pybtf.pybtf.CoreEvent.execute))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(200, "StimuliIsr", "Isr1", 0, pybtf.pybtf.ProcessEvent.activate, True))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(300, "Scheduler1", "Isr1", 0, pybtf.pybtf.ProcessEvent.interrupt_suspended, True))
        btf_file.finish()
        self.assertEqual(getFileAsString("test.btf"),"#version 2.2.1\n#creator libBtf\n#timescale ns\n100,Core1,0,C,Core1,0,execute\n200,StimuliIsr,0,I,Isr1,0,activate\n300,Scheduler1,0,I,Isr1,0,interrupt_suspended\n")
        
        import_btf = pybtf.pybtf.BtfFile("importtest.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, False, False, False)
        import_btf.importFromFile("test.btf")
        import_btf.finish()
        self.assertEqual(getFileAsString("test.btf"),getFileAsString("importtest.btf"))
        os.remove("test.btf")
        os.remove("importtest.btf")

    def test_process_runnable_interaction(self):
        btf_file = pybtf.pybtf.BtfFile("test.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, True, False, False)
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.start, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(100, "Core1", "Runnable1", pybtf.pybtf.RunnableEvent.start))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(100, "Core1", "Runnable2", pybtf.pybtf.RunnableEvent.start))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(100, "Core1", "Runnable3", pybtf.pybtf.RunnableEvent.start))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(100, "Core1", "Runnable4", pybtf.pybtf.RunnableEvent.start))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(100, "Core1", "Runnable2", pybtf.pybtf.RunnableEvent.start))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(100, "Core1", "Runnable2", pybtf.pybtf.RunnableEvent.terminate))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(100, "Core1", "Runnable2", pybtf.pybtf.RunnableEvent.start))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.preempt, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.no_task_running, btf_file.runnableEvent(100, "Core1", "Runnable4", pybtf.pybtf.RunnableEvent.terminate))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core1", "Task2", 0, pybtf.pybtf.ProcessEvent.start, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.runnable_source_task_not_running, btf_file.runnableEvent(100, "Core1", "Runnable4", pybtf.pybtf.RunnableEvent.terminate))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core1", "Task2", 0, pybtf.pybtf.ProcessEvent.preempt, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.resume, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(100, "Core1", "Runnable2", pybtf.pybtf.RunnableEvent.terminate))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(100, "Core1", "Runnable4", pybtf.pybtf.RunnableEvent.terminate))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(100, "Core1", "Runnable3", pybtf.pybtf.RunnableEvent.terminate))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(100, "Core1", "Runnable2", pybtf.pybtf.RunnableEvent.terminate))
        self.assertEqual(pybtf.pybtf.ErrorCodes.terminate_on_task_with_running_runnables, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.terminate, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(100, "Core1", "Runnable1", pybtf.pybtf.RunnableEvent.terminate))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.terminate, False))
        btf_file.finish()

        self.assertEqual(getFileAsString("test.btf"),"#version 2.2.1\n#creator libBtf\n#timescale ns\n100,Core1,0,T,Task1,0,start\n100,Task1,0,R,Runnable1,0,start\n100,Task1,0,R,Runnable1,0,suspend\n100,Task1,0,R,Runnable2,0,start\n100,Task1,0,R,Runnable2,0,suspend\n100,Task1,0,R,Runnable3,0,start\n100,Task1,0,R,Runnable3,0,suspend\n100,Task1,0,R,Runnable4,0,start\n100,Task1,0,R,Runnable4,0,suspend\n100,Task1,0,R,Runnable2,1,start\n100,Task1,0,R,Runnable2,1,terminate\n100,Task1,0,R,Runnable4,0,resume\n100,Task1,0,R,Runnable4,0,suspend\n100,Task1,0,R,Runnable2,2,start\n100,Task1,0,R,Runnable2,2,suspend\n100,Core1,0,T,Task1,0,preempt\n100,Core1,0,T,Task2,0,start\n100,Core1,0,T,Task2,0,preempt\n100,Core1,0,T,Task1,0,resume\n100,Task1,0,R,Runnable2,2,resume\n100,Task1,0,R,Runnable2,2,terminate\n100,Task1,0,R,Runnable4,0,resume\n100,Task1,0,R,Runnable4,0,terminate\n100,Task1,0,R,Runnable3,0,resume\n100,Task1,0,R,Runnable3,0,terminate\n100,Task1,0,R,Runnable2,0,resume\n100,Task1,0,R,Runnable2,0,terminate\n100,Task1,0,R,Runnable1,0,resume\n100,Task1,0,R,Runnable1,0,terminate\n100,Core1,0,T,Task1,0,terminate\n")
        
        import_btf = pybtf.pybtf.BtfFile("importtest.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, False, False, False)
        import_btf.importFromFile("test.btf")
        import_btf.finish()
        self.assertEqual(getFileAsString("test.btf"),getFileAsString("importtest.btf"))
        os.remove("test.btf")
        os.remove("importtest.btf")

    def test_task_migration(self):
        btf_file = pybtf.pybtf.BtfFile("test.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, True, False, False)        
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.start, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.invalid_state_transition, btf_file.taskMigrationEvent(100, "Core1", "Core2", "Task1", 0))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.wait, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.taskMigrationEvent(100, "Core1", "Core2", "Task1", 0))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core2", "Task1", 0, pybtf.pybtf.ProcessEvent.release, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core2", "Task1", 0, pybtf.pybtf.ProcessEvent.resume, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core2", "Task1", 0, pybtf.pybtf.ProcessEvent.terminate, False))
        btf_file.finish()

        self.assertEqual(getFileAsString("test.btf"),"#version 2.2.1\n#creator libBtf\n#timescale ns\n100,Core1,0,T,Task1,0,start\n100,Core1,0,T,Task1,0,wait\n100,Core1,0,T,Task1,0,enforcedmigration\n100,Core2,0,T,Task1,0,fullmigration\n100,Core2,0,T,Task1,0,release\n100,Core2,0,T,Task1,0,resume\n100,Core2,0,T,Task1,0,terminate\n")
        
        import_btf = pybtf.pybtf.BtfFile("importtest.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, False, False, False)
        import_btf.importFromFile("test.btf")
        import_btf.finish()
        self.assertEqual(getFileAsString("test.btf"),getFileAsString("importtest.btf"))
        os.remove("test.btf")
        os.remove("importtest.btf")

    def test_Semaphore(self):
        btf_file = pybtf.pybtf.BtfFile("test.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, True, False, False)        
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.semaphoreEvent(0, "Sem1", "Sem1", pybtf.pybtf.SemaphoreEvent.free, 0))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.start, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(150, "Core2", "Isr1", 0, pybtf.pybtf.ProcessEvent.start, True))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.semaphoreEvent(200, "Core1", "Sem1", pybtf.pybtf.SemaphoreEvent.requestsemaphore, 0))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.semaphoreEvent(200, "Core1", "Sem1", pybtf.pybtf.SemaphoreEvent.increment, 1))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.semaphoreEvent(200, "Core1", "Sem1", pybtf.pybtf.SemaphoreEvent.queued, 1))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.semaphoreEvent(200, "Sem1", "Sem1", pybtf.pybtf.SemaphoreEvent.lock, 1))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.semaphoreEvent(200, "Core1", "Sem1", pybtf.pybtf.SemaphoreEvent.assigned, 1))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.semaphoreEvent(300, "Core2", "Sem1", pybtf.pybtf.SemaphoreEvent.requestsemaphore, 1))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.semaphoreEvent(300, "Core2", "Sem1", pybtf.pybtf.SemaphoreEvent.increment, 2))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.semaphoreEvent(300, "Core2", "Sem1", pybtf.pybtf.SemaphoreEvent.queued, 2))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.semaphoreEvent(300, "Sem1", "Sem1", pybtf.pybtf.SemaphoreEvent.overfull, 2))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.semaphoreEvent(300, "Core2", "Sem1", pybtf.pybtf.SemaphoreEvent.waiting, 2))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.semaphoreEvent(400, "Core1", "Sem1", pybtf.pybtf.SemaphoreEvent.released, 2))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.semaphoreEvent(400, "Core1", "Sem1", pybtf.pybtf.SemaphoreEvent.decrement, 1))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.semaphoreEvent(400, "Sem1", "Sem1", pybtf.pybtf.SemaphoreEvent.full, 1))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.semaphoreEvent(400, "Core2", "Sem1", pybtf.pybtf.SemaphoreEvent.assigned, 1))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.semaphoreEvent(500, "Core2", "Sem1", pybtf.pybtf.SemaphoreEvent.decrement, 0))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.semaphoreEvent(500, "Sem1", "Sem1", pybtf.pybtf.SemaphoreEvent.unlock, 0))        
        btf_file.finish()

        self.assertEqual(getFileAsString("test.btf"),"#version 2.2.1\n#creator libBtf\n#timescale ns\n0,Sem1,0,SEM,Sem1,0,free,0\n100,Core1,0,T,Task1,0,start\n150,Core2,0,I,Isr1,0,start\n200,Task1,0,SEM,Sem1,0,requestsemaphore,0\n200,Task1,0,SEM,Sem1,0,increment,1\n200,Task1,0,SEM,Sem1,0,queued,1\n200,Sem1,0,SEM,Sem1,0,lock,1\n200,Task1,0,SEM,Sem1,0,assigned,1\n300,Isr1,0,SEM,Sem1,0,requestsemaphore,1\n300,Isr1,0,SEM,Sem1,0,increment,2\n300,Isr1,0,SEM,Sem1,0,queued,2\n300,Sem1,0,SEM,Sem1,0,overfull,2\n300,Isr1,0,SEM,Sem1,0,waiting,2\n400,Task1,0,SEM,Sem1,0,released,2\n400,Task1,0,SEM,Sem1,0,decrement,1\n400,Sem1,0,SEM,Sem1,0,full,1\n400,Isr1,0,SEM,Sem1,0,assigned,1\n500,Isr1,0,SEM,Sem1,0,decrement,0\n500,Sem1,0,SEM,Sem1,0,unlock,0\n")
        
        import_btf = pybtf.pybtf.BtfFile("importtest.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, False, False, False)
        import_btf.importFromFile("test.btf")
        import_btf.finish()
        self.assertEqual(getFileAsString("test.btf"),getFileAsString("importtest.btf"))
        os.remove("test.btf")
        os.remove("importtest.btf")

class TestBtf_process(unittest.TestCase):
    def test_simple_test(self):
        btf_file = pybtf.pybtf.BtfFile("test.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, False, False, False)
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.coreEvent(100, "Core1", pybtf.pybtf.CoreEvent.execute))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(200, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.start, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(300, "Task1", "Runnable1", pybtf.pybtf.RunnableEvent.start))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(400, "Task1", "Runnable1", pybtf.pybtf.RunnableEvent.terminate))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(500, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.terminate, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.coreEvent(600, "Core1", pybtf.pybtf.CoreEvent.idle))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.coreEvent(700, "Core2", pybtf.pybtf.CoreEvent.execute))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(800, "Core2", "Task2", 0, pybtf.pybtf.ProcessEvent.start, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(900, "Task2", "Runnable2", pybtf.pybtf.RunnableEvent.start))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(1000, "Task2", "Runnable2", pybtf.pybtf.RunnableEvent.terminate))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(1100, "Core2", "Task2", 0, pybtf.pybtf.ProcessEvent.terminate, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.coreEvent(1200, "Core2", pybtf.pybtf.CoreEvent.idle))
        btf_file.finish()
        self.assertEqual(getFileAsString("test.btf"), "#version 2.2.1\n#creator libBtf\n#timescale ns\n100,Core1,0,C,Core1,0,execute\n200,Core1,0,T,Task1,0,start\n300,Task1,0,R,Runnable1,0,start\n400,Task1,0,R,Runnable1,0,terminate\n500,Core1,0,T,Task1,0,terminate\n600,Core1,0,C,Core1,0,idle\n700,Core2,0,C,Core2,0,execute\n800,Core2,0,T,Task2,0,start\n900,Task2,0,R,Runnable2,0,start\n1000,Task2,0,R,Runnable2,0,terminate\n1100,Core2,0,T,Task2,0,terminate\n1200,Core2,0,C,Core2,0,idle\n")
        
        import_btf = pybtf.pybtf.BtfFile("importtest.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, False, False, False)
        import_btf.importFromFile("test.btf")
        import_btf.finish()
        self.assertEqual(getFileAsString("test.btf"),getFileAsString("importtest.btf"))
        os.remove("test.btf")
        os.remove("importtest.btf")

    def test_runnable_preemption_with_auto_suspend(self):
        btf_file = pybtf.pybtf.BtfFile("test.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, False, False, False)
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.coreEvent(100, "Core1", pybtf.pybtf.CoreEvent.execute))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(200, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.start, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(300, "Task1", "Runnable1", pybtf.pybtf.RunnableEvent.start))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(400, "Task1", "Runnable2", pybtf.pybtf.RunnableEvent.start))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(500, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.preempt, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(600, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.resume, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(700, "Task1", "Runnable2", pybtf.pybtf.RunnableEvent.terminate))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(800, "Task1", "Runnable1", pybtf.pybtf.RunnableEvent.terminate))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(900, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.terminate, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.coreEvent(1000, "Core1", pybtf.pybtf.CoreEvent.idle))
        btf_file.finish()
        self.assertEqual(getFileAsString("test.btf"),"#version 2.2.1\n#creator libBtf\n#timescale ns\n100,Core1,0,C,Core1,0,execute\n200,Core1,0,T,Task1,0,start\n300,Task1,0,R,Runnable1,0,start\n400,Task1,0,R,Runnable1,0,suspend\n400,Task1,0,R,Runnable2,0,start\n500,Task1,0,R,Runnable2,0,suspend\n500,Core1,0,T,Task1,0,preempt\n600,Core1,0,T,Task1,0,resume\n600,Task1,0,R,Runnable2,0,resume\n700,Task1,0,R,Runnable2,0,terminate\n700,Task1,0,R,Runnable1,0,resume\n800,Task1,0,R,Runnable1,0,terminate\n900,Core1,0,T,Task1,0,terminate\n1000,Core1,0,C,Core1,0,idle\n")
        
        import_btf = pybtf.pybtf.BtfFile("importtest.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, False, False, False)
        import_btf.importFromFile("test.btf")
        import_btf.finish()
        self.assertEqual(getFileAsString("test.btf"),getFileAsString("importtest.btf"))
        os.remove("test.btf")
        os.remove("importtest.btf")

    def test_runnable_preemption_without_auto_suspend(self):
        btf_file = pybtf.pybtf.BtfFile("test.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, False, False, False, False)
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.coreEvent(100, "Core1", pybtf.pybtf.CoreEvent.execute))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(200, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.start, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(300, "Task1", "Runnable1", pybtf.pybtf.RunnableEvent.start))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(400, "Task1", "Runnable2", pybtf.pybtf.RunnableEvent.start))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(500, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.preempt, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(600, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.resume, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(700, "Task1", "Runnable2", pybtf.pybtf.RunnableEvent.terminate))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(800, "Task1", "Runnable1", pybtf.pybtf.RunnableEvent.terminate))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(900, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.terminate, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.coreEvent(1000, "Core1", pybtf.pybtf.CoreEvent.idle))
        btf_file.finish()
        self.assertEqual(getFileAsString("test.btf"),"#version 2.2.1\n#creator libBtf\n#timescale ns\n100,Core1,0,C,Core1,0,execute\n200,Core1,0,T,Task1,0,start\n300,Task1,0,R,Runnable1,0,start\n400,Task1,0,R,Runnable2,0,start\n500,Task1,0,R,Runnable2,0,suspend\n500,Task1,0,R,Runnable1,0,suspend\n500,Core1,0,T,Task1,0,preempt\n600,Core1,0,T,Task1,0,resume\n600,Task1,0,R,Runnable1,0,resume\n600,Task1,0,R,Runnable2,0,resume\n700,Task1,0,R,Runnable2,0,terminate\n800,Task1,0,R,Runnable1,0,terminate\n900,Core1,0,T,Task1,0,terminate\n1000,Core1,0,C,Core1,0,idle\n")
        
        import_btf = pybtf.pybtf.BtfFile("importtest.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, False, False, False, False)
        import_btf.importFromFile("test.btf")
        import_btf.finish()
        self.assertEqual(getFileAsString("test.btf"),getFileAsString("importtest.btf"))
        os.remove("test.btf")
        os.remove("importtest.btf")

    def test_start_of_trace_during_runnable_execution(self):
        btf_file = pybtf.pybtf.BtfFile("test.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, False, False, False)
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(300, "Task1", "Runnable2", pybtf.pybtf.RunnableEvent.start))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(400, "Task1", "Runnable2", pybtf.pybtf.RunnableEvent.terminate))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(500, "Task1", "Runnable1", pybtf.pybtf.RunnableEvent.terminate))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(600, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.terminate, False))
        btf_file.finish()
        self.assertEqual(getFileAsString("test.btf"),"#version 2.2.1\n#creator libBtf\n#timescale ns\n300,Task1,0,R,Runnable2,0,start\n400,Task1,0,R,Runnable2,0,terminate\n500,Task1,0,R,Runnable1,0,terminate\n600,Core1,0,T,Task1,0,terminate\n")
        
        import_btf = pybtf.pybtf.BtfFile("importtest.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, False, False, False)
        import_btf.importFromFile("test.btf")
        import_btf.finish()
        self.assertEqual(getFileAsString("test.btf"),getFileAsString("importtest.btf"))
        os.remove("test.btf")
        os.remove("importtest.btf")

    def test_OS_with_auto_task_generation(self):
        btf_file = pybtf.pybtf.BtfFile("test.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, False, False, True)
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.coreEvent(100, "Core1", pybtf.pybtf.CoreEvent.execute))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.coreEvent(200, "Core2", pybtf.pybtf.CoreEvent.execute))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(300, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.start, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(400, "Core2", "Isr1", 0, pybtf.pybtf.ProcessEvent.start, True))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.osEvent(500, "Task1", "OsEvent2", pybtf.pybtf.OsEvent.wait_event))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.osEvent(600, "Isr1", "OsEvent2", pybtf.pybtf.OsEvent.set_event))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.osEvent(700, "Task1", "OsEvent2", pybtf.pybtf.OsEvent.clear_event))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(800, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.terminate, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(900, "Core2", "Isr1", 0, pybtf.pybtf.ProcessEvent.terminate, True))
        btf_file.finish()
        self.assertEqual(getFileAsString("test.btf"),"#version 2.2.1\n#creator libBtf\n#timescale ns\n100,Core1,0,C,Core1,0,execute\n200,Core2,0,C,Core2,0,execute\n300,Core1,0,T,Task1,0,start\n400,Core2,0,I,Isr1,0,start\n500,Task1,0,EVENT,OsEvent2,0,wait_event\n500,Core1,0,T,Task1,0,wait\n600,Isr1,0,EVENT,OsEvent2,0,set_event\n600,Core1,0,T,Task1,0,release\n600,Core1,0,T,Task1,0,resume\n700,Task1,0,EVENT,OsEvent2,0,clear_event\n800,Core1,0,T,Task1,0,terminate\n900,Core2,0,I,Isr1,0,terminate\n")
        
        import_btf = pybtf.pybtf.BtfFile("importtest.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, False, False, False)
        import_btf.importFromFile("test.btf")
        import_btf.finish()
        self.assertEqual(getFileAsString("test.btf"),getFileAsString("importtest.btf"))
        os.remove("test.btf")
        os.remove("importtest.btf")

    def test_OS_without_auto_task_generation(self):
        btf_file = pybtf.pybtf.BtfFile("test.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, False, False, False)
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.coreEvent(100, "Core1", pybtf.pybtf.CoreEvent.execute))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.coreEvent(200, "Core2", pybtf.pybtf.CoreEvent.execute))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(300, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.start, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(400, "Core2", "Isr1", 0, pybtf.pybtf.ProcessEvent.start, True))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.osEvent(500, "Task1", "OsEvent2", pybtf.pybtf.OsEvent.wait_event))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(500, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.wait, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.osEvent(600, "Isr1", "OsEvent2", pybtf.pybtf.OsEvent.set_event))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(600, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.release, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(600, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.resume, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.osEvent(700, "Task1", "OsEvent2", pybtf.pybtf.OsEvent.clear_event))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(800, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.terminate, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(900, "Core2", "Isr1", 0, pybtf.pybtf.ProcessEvent.terminate, True))
        btf_file.finish()
        self.assertEqual(getFileAsString("test.btf"),"#version 2.2.1\n#creator libBtf\n#timescale ns\n100,Core1,0,C,Core1,0,execute\n200,Core2,0,C,Core2,0,execute\n300,Core1,0,T,Task1,0,start\n400,Core2,0,I,Isr1,0,start\n500,Task1,0,EVENT,OsEvent2,0,wait_event\n500,Core1,0,T,Task1,0,wait\n600,Isr1,0,EVENT,OsEvent2,0,set_event\n600,Core1,0,T,Task1,0,release\n600,Core1,0,T,Task1,0,resume\n700,Task1,0,EVENT,OsEvent2,0,clear_event\n800,Core1,0,T,Task1,0,terminate\n900,Core2,0,I,Isr1,0,terminate\n")
        
        import_btf = pybtf.pybtf.BtfFile("importtest.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, False, False, False)
        import_btf.importFromFile("test.btf")
        import_btf.finish()
        self.assertEqual(getFileAsString("test.btf"),getFileAsString("importtest.btf"))
        os.remove("test.btf")
        os.remove("importtest.btf")

    def test_Stimulus(self):
        btf_file = pybtf.pybtf.BtfFile("test.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, False, False, False)
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.stimulusEvent(100, "StimuliCore1", "StimuliCore1", pybtf.pybtf.StimulusEvent.trigger))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.coreEvent(100, "Core1", pybtf.pybtf.CoreEvent.execute))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.stimulusEvent(200, "StimuliTask", "StimuliTask", pybtf.pybtf.StimulusEvent.trigger))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(200, "StimuliTask", "Task1", 0, pybtf.pybtf.ProcessEvent.activate, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(200, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.start, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(300, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.terminate, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.coreEvent(400, "Core1", pybtf.pybtf.CoreEvent.idle))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.stimulusEvent(500, "StimuliCore2", "StimuliCore2", pybtf.pybtf.StimulusEvent.trigger))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.coreEvent(500, "Core2", pybtf.pybtf.CoreEvent.execute))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.stimulusEvent(600, "StimuliTask", "StimuliTask", pybtf.pybtf.StimulusEvent.trigger))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(600, "StimuliTask", "Task1", 0, pybtf.pybtf.ProcessEvent.activate, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(600, "Core2", "Task1", 0, pybtf.pybtf.ProcessEvent.start, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(700, "Core2", "Task1", 0, pybtf.pybtf.ProcessEvent.terminate, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.coreEvent(800, "Core2", pybtf.pybtf.CoreEvent.idle))
        btf_file.finish()
        self.assertEqual(getFileAsString("test.btf"),"#version 2.2.1\n#creator libBtf\n#timescale ns\n100,StimuliCore1,0,STI,StimuliCore1,0,trigger\n100,Core1,0,C,Core1,0,execute\n200,StimuliTask,0,STI,StimuliTask,0,trigger\n200,StimuliTask,0,T,Task1,0,activate\n200,Core1,0,T,Task1,0,start\n300,Core1,0,T,Task1,0,terminate\n400,Core1,0,C,Core1,0,idle\n500,StimuliCore2,0,STI,StimuliCore2,0,trigger\n500,Core2,0,C,Core2,0,execute\n600,StimuliTask,1,STI,StimuliTask,1,trigger\n600,StimuliTask,1,T,Task1,0,activate\n600,Core2,0,T,Task1,0,start\n700,Core2,0,T,Task1,0,terminate\n800,Core2,0,C,Core2,0,idle\n")
        
        import_btf = pybtf.pybtf.BtfFile("importtest.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, False, False, False)
        import_btf.importFromFile("test.btf")
        import_btf.finish()
        self.assertEqual(getFileAsString("test.btf"),getFileAsString("importtest.btf"))
        os.remove("test.btf")
        os.remove("importtest.btf")

    def test_Scheduler(self):
        btf_file = pybtf.pybtf.BtfFile("test.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, False, False, False)
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.coreEvent(100, "Core1", pybtf.pybtf.CoreEvent.execute))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(200, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.start, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.schedulerEvent(300, "Task1", "Scheduler1", pybtf.pybtf.SchedulerEvent.schedulepoint))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(400, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.preempt, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.schedulerEvent(500, "Scheduler1", "Scheduler1", pybtf.pybtf.SchedulerEvent.schedule))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(600, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.resume, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(700, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.terminate, False))
        btf_file.finish()
        self.assertEqual(getFileAsString("test.btf"),"#version 2.2.1\n#creator libBtf\n#timescale ns\n100,Core1,0,C,Core1,0,execute\n200,Core1,0,T,Task1,0,start\n300,Task1,0,SCHED,Scheduler1,0,schedulepoint\n400,Core1,0,T,Task1,0,preempt\n500,Scheduler1,0,SCHED,Scheduler1,0,schedule\n600,Core1,0,T,Task1,0,resume\n700,Core1,0,T,Task1,0,terminate\n")
        
        import_btf = pybtf.pybtf.BtfFile("importtest.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, False, False, False)
        import_btf.importFromFile("test.btf")
        import_btf.finish()
        self.assertEqual(getFileAsString("test.btf"),getFileAsString("importtest.btf"))
        os.remove("test.btf")
        os.remove("importtest.btf")

    def test_task_state_transitions(self):
        btf_file = pybtf.pybtf.BtfFile("test.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, False, False, False)
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.start, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.allocated_to_different_core, btf_file.processEvent(100, "Core2", "Task1", 0, pybtf.pybtf.ProcessEvent.start, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.preempt, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.descending_timestamp, btf_file.processEvent(0, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.terminate, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.invalid_state_transition, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.terminate, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.resume, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.multiple_tasks_running, btf_file.processEvent(100, "Core1", "Task2", 0, pybtf.pybtf.ProcessEvent.start, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.poll, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.run, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.wait, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.invalid_state_transition, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.resume, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.release, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.resume, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.invalid_state_transition, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.poll_parking, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.terminate, False))
        btf_file.finish()
        os.remove("test.btf")

    def test_task_interrupt_suspend(self):
        btf_file = pybtf.pybtf.BtfFile("test.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, False, False, False)
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.coreEvent(100, "Core1", pybtf.pybtf.CoreEvent.execute))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(200, "StimuliIsr", "Isr1", 0, pybtf.pybtf.ProcessEvent.activate, True))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(300, "Scheduler1", "Isr1", 0, pybtf.pybtf.ProcessEvent.interrupt_suspended, True))
        btf_file.finish()
        self.assertEqual(getFileAsString("test.btf"),"#version 2.2.1\n#creator libBtf\n#timescale ns\n100,Core1,0,C,Core1,0,execute\n200,StimuliIsr,0,I,Isr1,0,activate\n300,Scheduler1,0,I,Isr1,0,interrupt_suspended\n")
        
        import_btf = pybtf.pybtf.BtfFile("importtest.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, False, False, False)
        import_btf.importFromFile("test.btf")
        import_btf.finish()
        self.assertEqual(getFileAsString("test.btf"),getFileAsString("importtest.btf"))
        os.remove("test.btf")
        os.remove("importtest.btf")

    def test_process_runnable_interaction(self):
        btf_file = pybtf.pybtf.BtfFile("test.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, False, False, False)
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.start, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(100, "Task1", "Runnable1", pybtf.pybtf.RunnableEvent.start))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(100, "Task1", "Runnable2", pybtf.pybtf.RunnableEvent.start))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(100, "Task1", "Runnable3", pybtf.pybtf.RunnableEvent.start))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(100, "Task1", "Runnable4", pybtf.pybtf.RunnableEvent.start))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(100, "Task1", "Runnable2", pybtf.pybtf.RunnableEvent.start))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(100, "Task1", "Runnable2", pybtf.pybtf.RunnableEvent.terminate))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(100, "Task1", "Runnable2", pybtf.pybtf.RunnableEvent.start))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.preempt, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.no_task_running, btf_file.runnableEvent(100, "Task1", "Runnable4", pybtf.pybtf.RunnableEvent.terminate))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core1", "Task2", 0, pybtf.pybtf.ProcessEvent.start, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.runnable_source_task_not_running, btf_file.runnableEvent(100, "Task1", "Runnable4", pybtf.pybtf.RunnableEvent.terminate))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core1", "Task2", 0, pybtf.pybtf.ProcessEvent.preempt, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.resume, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(100, "Task1", "Runnable2", pybtf.pybtf.RunnableEvent.terminate))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(100, "Task1", "Runnable4", pybtf.pybtf.RunnableEvent.terminate))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(100, "Task1", "Runnable3", pybtf.pybtf.RunnableEvent.terminate))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(100, "Task1", "Runnable2", pybtf.pybtf.RunnableEvent.terminate))
        self.assertEqual(pybtf.pybtf.ErrorCodes.terminate_on_task_with_running_runnables, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.terminate, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.runnableEvent(100, "Task1", "Runnable1", pybtf.pybtf.RunnableEvent.terminate))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.terminate, False))
        btf_file.finish()

        self.assertEqual(getFileAsString("test.btf"),"#version 2.2.1\n#creator libBtf\n#timescale ns\n100,Core1,0,T,Task1,0,start\n100,Task1,0,R,Runnable1,0,start\n100,Task1,0,R,Runnable1,0,suspend\n100,Task1,0,R,Runnable2,0,start\n100,Task1,0,R,Runnable2,0,suspend\n100,Task1,0,R,Runnable3,0,start\n100,Task1,0,R,Runnable3,0,suspend\n100,Task1,0,R,Runnable4,0,start\n100,Task1,0,R,Runnable4,0,suspend\n100,Task1,0,R,Runnable2,1,start\n100,Task1,0,R,Runnable2,1,terminate\n100,Task1,0,R,Runnable4,0,resume\n100,Task1,0,R,Runnable4,0,suspend\n100,Task1,0,R,Runnable2,2,start\n100,Task1,0,R,Runnable2,2,suspend\n100,Core1,0,T,Task1,0,preempt\n100,Core1,0,T,Task2,0,start\n100,Core1,0,T,Task2,0,preempt\n100,Core1,0,T,Task1,0,resume\n100,Task1,0,R,Runnable2,2,resume\n100,Task1,0,R,Runnable2,2,terminate\n100,Task1,0,R,Runnable4,0,resume\n100,Task1,0,R,Runnable4,0,terminate\n100,Task1,0,R,Runnable3,0,resume\n100,Task1,0,R,Runnable3,0,terminate\n100,Task1,0,R,Runnable2,0,resume\n100,Task1,0,R,Runnable2,0,terminate\n100,Task1,0,R,Runnable1,0,resume\n100,Task1,0,R,Runnable1,0,terminate\n100,Core1,0,T,Task1,0,terminate\n")
        
        import_btf = pybtf.pybtf.BtfFile("importtest.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, False, False, False)
        import_btf.importFromFile("test.btf")
        import_btf.finish()
        self.assertEqual(getFileAsString("test.btf"),getFileAsString("importtest.btf"))
        os.remove("test.btf")
        os.remove("importtest.btf")

    def test_task_migration(self):
        btf_file = pybtf.pybtf.BtfFile("test.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, False, False, False)        
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.start, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.invalid_state_transition, btf_file.taskMigrationEvent(100, "Core1", "Core2", "Task1", 0))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.wait, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.taskMigrationEvent(100, "Core1", "Core2", "Task1", 0))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core2", "Task1", 0, pybtf.pybtf.ProcessEvent.release, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core2", "Task1", 0, pybtf.pybtf.ProcessEvent.resume, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core2", "Task1", 0, pybtf.pybtf.ProcessEvent.terminate, False))
        btf_file.finish()

        self.assertEqual(getFileAsString("test.btf"),"#version 2.2.1\n#creator libBtf\n#timescale ns\n100,Core1,0,T,Task1,0,start\n100,Core1,0,T,Task1,0,wait\n100,Core1,0,T,Task1,0,enforcedmigration\n100,Core2,0,T,Task1,0,fullmigration\n100,Core2,0,T,Task1,0,release\n100,Core2,0,T,Task1,0,resume\n100,Core2,0,T,Task1,0,terminate\n")
        
        import_btf = pybtf.pybtf.BtfFile("importtest.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, False, False, False)
        import_btf.importFromFile("test.btf")
        import_btf.finish()
        self.assertEqual(getFileAsString("test.btf"),getFileAsString("importtest.btf"))
        os.remove("test.btf")
        os.remove("importtest.btf")

    def test_Semaphore(self):
        btf_file = pybtf.pybtf.BtfFile("test.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, False, False, False)        
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.semaphoreEvent(0, "Sem1", "Sem1", pybtf.pybtf.SemaphoreEvent.free, 0))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(100, "Core1", "Task1", 0, pybtf.pybtf.ProcessEvent.start, False))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.processEvent(150, "Core2", "Isr1", 0, pybtf.pybtf.ProcessEvent.start, True))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.semaphoreEvent(200, "Task1", "Sem1", pybtf.pybtf.SemaphoreEvent.requestsemaphore, 0))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.semaphoreEvent(200, "Task1", "Sem1", pybtf.pybtf.SemaphoreEvent.increment, 1))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.semaphoreEvent(200, "Task1", "Sem1", pybtf.pybtf.SemaphoreEvent.queued, 1))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.semaphoreEvent(200, "Sem1", "Sem1", pybtf.pybtf.SemaphoreEvent.lock, 1))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.semaphoreEvent(200, "Task1", "Sem1", pybtf.pybtf.SemaphoreEvent.assigned, 1))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.semaphoreEvent(300, "Isr1", "Sem1", pybtf.pybtf.SemaphoreEvent.requestsemaphore, 1))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.semaphoreEvent(300, "Isr1", "Sem1", pybtf.pybtf.SemaphoreEvent.increment, 2))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.semaphoreEvent(300, "Isr1", "Sem1", pybtf.pybtf.SemaphoreEvent.queued, 2))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.semaphoreEvent(300, "Sem1", "Sem1", pybtf.pybtf.SemaphoreEvent.overfull, 2))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.semaphoreEvent(300, "Isr1", "Sem1", pybtf.pybtf.SemaphoreEvent.waiting, 2))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.semaphoreEvent(400, "Task1", "Sem1", pybtf.pybtf.SemaphoreEvent.released, 2))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.semaphoreEvent(400, "Task1", "Sem1", pybtf.pybtf.SemaphoreEvent.decrement, 1))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.semaphoreEvent(400, "Sem1", "Sem1", pybtf.pybtf.SemaphoreEvent.full, 1))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.semaphoreEvent(400, "Isr1", "Sem1", pybtf.pybtf.SemaphoreEvent.assigned, 1))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.semaphoreEvent(500, "Isr1", "Sem1", pybtf.pybtf.SemaphoreEvent.decrement, 0))
        self.assertEqual(pybtf.pybtf.ErrorCodes.success, btf_file.semaphoreEvent(500, "Sem1", "Sem1", pybtf.pybtf.SemaphoreEvent.unlock, 0))        
        btf_file.finish()

        self.assertEqual(getFileAsString("test.btf"),"#version 2.2.1\n#creator libBtf\n#timescale ns\n0,Sem1,0,SEM,Sem1,0,free,0\n100,Core1,0,T,Task1,0,start\n150,Core2,0,I,Isr1,0,start\n200,Task1,0,SEM,Sem1,0,requestsemaphore,0\n200,Task1,0,SEM,Sem1,0,increment,1\n200,Task1,0,SEM,Sem1,0,queued,1\n200,Sem1,0,SEM,Sem1,0,lock,1\n200,Task1,0,SEM,Sem1,0,assigned,1\n300,Isr1,0,SEM,Sem1,0,requestsemaphore,1\n300,Isr1,0,SEM,Sem1,0,increment,2\n300,Isr1,0,SEM,Sem1,0,queued,2\n300,Sem1,0,SEM,Sem1,0,overfull,2\n300,Isr1,0,SEM,Sem1,0,waiting,2\n400,Task1,0,SEM,Sem1,0,released,2\n400,Task1,0,SEM,Sem1,0,decrement,1\n400,Sem1,0,SEM,Sem1,0,full,1\n400,Isr1,0,SEM,Sem1,0,assigned,1\n500,Isr1,0,SEM,Sem1,0,decrement,0\n500,Sem1,0,SEM,Sem1,0,unlock,0\n")
        
        import_btf = pybtf.pybtf.BtfFile("importtest.btf", pybtf.pybtf.BtfFile.Timescale.nano_seconds, True, False, False, False)
        import_btf.importFromFile("test.btf")
        import_btf.finish()
        self.assertEqual(getFileAsString("test.btf"),getFileAsString("importtest.btf"))
        os.remove("test.btf")
        os.remove("importtest.btf")



if __name__ == '__main__':
    unittest.main()